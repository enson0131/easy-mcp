{"version":3,"sources":["../src/mcp.ts","../src/utils/utils.ts","../src/cli.ts"],"sourcesContent":["import { FastMCP } from \"fastmcp\";\nimport { z } from \"zod\";\nimport { AsyncSeriesHook } from \"./utils/utils\";\nimport { resolve } from \"path\";\nimport { program } from \"commander\";\n\nexport interface ILanguageMcpConfig {\n  projectId: string; // 项目id\n  env: string; // 环境\n  language?: string; // 语言\n}\n\ninterface IChainResult {\n  options: ILanguageMcpConfig;\n  server: FastMCP;\n}\n\n/**\n * 从命令行、配置环境、函数参数中获取项目配置文件\n */\nconst initConfig = async (options?: ILanguageMcpConfig) => {\n  // 1. 获取命令行的参数\n  program.parse(process.argv);\n  const opts = program.opts();\n  const configPath = opts.config || resolve(process.cwd(), \".language-mcp.js\");\n\n  // 2. 获取配置文件的参数\n  let configJsonByFile = {};\n  try {\n    const configModule = await import(configPath);\n    configJsonByFile = configModule.default || configModule;\n  } catch (error) {\n    console.warn(`无法加载配置文件 ${configPath}:`, error.message);\n  }\n\n  // 3. 获取函数上的参数，进行合并\n  return Object.assign(\n    {},\n    configJsonByFile,\n    options || {}\n  ) as ILanguageMcpConfig;\n};\n\nconst createServer = async (options) => {\n  const server = new FastMCP({\n    name: \"language-mcp\", // 服务名称\n    version: \"1.0.0\",\n  });\n\n  return {\n    options,\n    server,\n  } as IChainResult;\n};\n\nconst addGetLanguageTools = async (lastResult: IChainResult) => {\n  const { server, options } = lastResult;\n  // 获取语言列表的工具函数\n  server.addTool({\n    name: \"get_language_list\",\n    description: \"获取语言列表\",\n    parameters: z.object({\n      //   project_id: z.string(), // 项目id\n      //   path: z.string(), // 路径\n    }),\n    execute: async (args) => {\n      //\n      console.log(\"options\");\n      return \"hello Language MCP\";\n    },\n  });\n\n  return lastResult;\n};\n\nconst startServer = async (options?: ILanguageMcpConfig) => {\n  const asyncSeries = new AsyncSeriesHook();\n  const init = async () => await initConfig(options);\n\n  const pips: Array<(...args) => Promise<any>> = [\n    init,\n    createServer,\n    addGetLanguageTools,\n  ];\n\n  let currentPivot = asyncSeries;\n  for (let pipsOperation of pips) {\n    currentPivot = currentPivot.next(pipsOperation);\n  }\n\n  console.log(`currentPivot -->`, currentPivot);\n\n  const pro = currentPivot.run();\n\n  pro.catch((err) => {\n    console.error(`[ERROR]`, err);\n  });\n\n  return pro;\n};\n\nexport default startServer;\n","\n/**\n * 请求重试\n */\nexport const retry = async (fn: () => any, count = 3) => {\n    return new Promise(async (resolve, reject) => {\n      while (count > 0) {\n        try {\n          const res = await fn();\n          resolve(res);\n          break;\n        } catch (error) {\n          count--;\n          if (count === 0) {\n            reject(error);\n          }\n      }\n    }});\n  }\n  \n  \nexport class AsyncSeriesHook {\n    tasks: Function[];\n    constructor() {\n      this.tasks = [];\n    }\n  \n    next(task: Function) {\n      this.tasks.push(task);\n      return this;\n    }\n  \n    callAsync(...args: any) {\n      const finalCallback = args.pop();\n      // @ts-ignore\n      const next = (idx: number, lastResult = null) => {\n        if (idx === this.tasks.length) {\n          finalCallback(lastResult, null);\n          return;\n        }\n        const task = this.tasks[idx];\n        task(lastResult, ...args).then(\n          (res: any) => {\n            next(idx + 1, res);\n          },\n          (err: any) => finalCallback(null, err),\n        );\n      };\n      next(0);\n    }\n  \n    run(...args: any) {\n      return new Promise<any>((resolve, reject) => {\n        const finalCallback = (res: any, err: any) => {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(res);\n          }\n        };\n        this.callAsync(...args, finalCallback);\n      });\n    }\n}\n  \n  \n  // 使用方法\n  // const testhook = new AsyncSeriesHook(['param1', 'param2']); // 构造函数里面是参数名称，参数个数任意\n  // // lastTaskResult表示上个任务的返回\n  // testhook.next(async (lastTaskResult, param1, param2) => {\n  //   console.log('任务1', param1, param2);\n  //   await Promise.resolve('hook1');\n  //   return 'result1';\n  // });\n  // testhook.next(async (lastTaskResult, param1, param2) => {\n  //   console.log('任务2', param1, param2, lastTaskResult);\n  //   await Promise.resolve('hook2');\n  //   // return Promise.reject('hook2 reject'); // 如果返回reject，则不会往下执行后面的任务\n  //   return 'result2';\n  // });\n  // testhook.next(async (lastTaskResult, param1, param2) => {\n  //   console.log('任务3', param1, param2, lastTaskResult);\n  //   await Promise.resolve('hook3');\n  //   return 'result3';\n  // });\n  \n  // const param1 = { sum: 0 };\n  // const param2 = 'test';\n  // // param1,param2是传递给各个任务的参数\n  // testhook.run(param1, param2).then(\n  //   res => {\n  //     // res是最后一个任务的返回值\n  //     console.log('最终回调', res);\n  //   },\n  //   err => {\n  //     // 如果有任意一个任务失败都会中断后面所有任务的执行，并将错误通过Err跑出\n  //     console.log('有错误了。。。', err);\n  //   },\n  // );\n  ","#!/usr/bin/env node\nimport startServer, { ILanguageMcpConfig } from './mcp';\nimport { program } from \"commander\";\n\nprogram\n    .name(\"language-mcp\")\n    .usage(`<command> [option]`)\n    .version(`1.0.0`, \"-v, --version\") // 版本号\n    .option(\"-c, --config <path>\", \"config file path\") // 配置文件路径\n    .option(\"-e, --env <string>\", \"env\") // 环境\n    .option(\"-l, --language <string>\", \"language code, like zh-CN, en-US\"); // 语言\n\nprogram.parse(process.argv);\n\nexport function start (options?: ILanguageMcpConfig) {\n  return startServer(options).catch((error) => {\n    console.error(\"Failed to start server:\", error);\n    process.exit(1);\n  });\n}\n\n// If we're being executed directly (not imported), start the server\n// 如果执行的是 cli 命令 + 配置了参数，则启动 server\nif (process?.argv?.length >= 2) {\n  start();\n}\n"],"mappings":"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","names":["resolve","program"]}